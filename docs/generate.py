"""
Auto-generate Sphinx rst pages for certain objects based on certain tags in
their docstrings.

Yes, this is the sort of thing that the Sphinx autodoc usually does.  But the
situation here is a bit off the beaten path, for example because we want to
show Clip-returing functions and Clip classes in the same way.

"""

import contextlib
import datetime
import dis
import glob
import inspect
import io
import importlib
import os
import re
import sys

sys.path.insert(0, os.path.join(os.path.split(__file__)[0], '..'))
import clip

# These are tags that we look for in the docstrings.  We'll create RST files
# with a list of each of them, to include in the user guide.
tags = [
    'from-source',  # for things that create clips by reading a source file
    'ex-nihilo', # for things that create a clip out of nothing
    'modify', # for things that accept one or more clips and return another clip
    'save', # for things that save or otherwise consume a completed clip
] 

# These are things to omit from the API reference, mostly because they are
# imported from the standard library.
exclude = [
    'ABC',
    'abstractmethod',
    'CompressedImage',
    'Time',
    'Enum',
    'Header',
]

MAIN_DIR='_generated'

def header(title, f):
    print(f'..', file=f)
    print(f'    I was generated by {__file__} on {datetime.datetime.now()}.', file=f)
    print(f"    You probably don't want to modify me directly.", file=f)
    print(file=f)
    print(f".. module:: clip", file=f)
    print(' :noindex:', file=f)

    if title:
        print(file=f)
        print('='*len(title), file=f)
        print(title, file=f)
        print('='*len(title), file=f)
    print(file=f)
    print(file=f)

def main():
    os.chdir(os.path.split(__file__)[0])
    os.makedirs(MAIN_DIR, exist_ok=True)
    
    print('Generating documentation.')

    # Examples
    print ('- Documenting examples:')
    with open(os.path.join(MAIN_DIR, 'examples.rst'), 'w') as f:
        for filename in glob.glob('../examples/*.py'):
            basename = os.path.basename(filename)
            print('  ', basename)

            spec = importlib.util.spec_from_file_location('the_module', filename)
            assert spec is not None
            mod = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(mod)

            header(f"`{basename}`", f)
            print(mod.__doc__, file=f)

            sio = io.StringIO()
            dis.dis(mod, file=sio)
            disassembled = sio.getvalue()
            
            print(file=f)
            print('Clip features used in this example: ', file=f, end='')

            for match in re.finditer(r'(LOAD_GLOBAL\s+\d+\s+\(clip\)\n\s+\d+\s+LOAD_([A-Z]*)\s+\d+\s+\(([a-zA-Z0-9_]+)\))', disassembled):
                item_name = match.group(3)
                item = clip.__dict__[item_name]
                if inspect.isclass(item):
                    item_type = 'class'
                elif callable(item):
                    item_type = 'func'
                else:
                    assert False, (item_name)
                print(f"  :{item_type}:`{item_name}` ", file=f, end='')
            print('\n', file=f)
            print(file=f)
            print(f"`{basename} on github <https://github.com/jokane/clip/blob/master/examples/{basename}>`_", file=f)
            print('\n\n\n', file=f)

    # API Reference and tag lists
    print ('- Documenting classes and functions:')
    with contextlib.ExitStack() as exst:
        f_ref = exst.enter_context(open(os.path.join(MAIN_DIR, 'reference.rst'), 'w'))
        header('API reference', f_ref)
        print(file=f_ref)

        f_tag = { tag: exst.enter_context(open(os.path.join(MAIN_DIR, f'{tag}.rst'), 'w')) for tag in tags }

        for name, thing in sorted(clip.__dict__.items(), key=lambda x: x[0].lower()):
            if name in exclude: continue

            doc = thing.__doc__ if thing.__doc__ else ''

            thing_tags = [tag for tag in tags if f'|{tag}|' in doc]


            basename = f'{name}.rst'
            filename = os.path.join(MAIN_DIR, basename)

            if inspect.isclass(thing):
                print(f'.. autoclass:: {name}', file=f_ref)
                if not ('|from-source|' in doc or '|modify|' in doc or '|ex-nihilo|' in doc):
                    print('    :members:', file=f_ref)
                print(file=f_ref)
                doc = True
            elif callable(thing):
                print(f'.. autofunction:: {name}', file=f_ref)
                print(file=f_ref)
                doc = True
            else:
                # Ignore other things, of which there are many.
                doc = False

            if doc:
                print('  ', name, ' '.join([f'#{tag}' for tag in thing_tags]))

            for tag in thing_tags:
                print(f':func:`clip.{name}`', file=f_tag[tag])

            

if __name__ == '__main__':
    main()

