def pdf_scroll(pdf, length, **kwargs):
    width=500
    height=300
        
    cached_filename, success = cache.lookup(f'pdf composite {pdf}', 'png')
    if not success:
        print(f"Building composite image of {pdf}...")
        page_images = pdf2image.convert_from_path(pdf, **kwargs)
        page_images = list(map(lambda x: np.array(x), page_images))

        big_image = np.vstack(page_images)
        cv2.imwrite(cached_filename, big_image)
        cache.insert(cached_filename)
    else:
        print(f"Using cached composite image of {pdf}")
        big_image = cv2.imread(cached_filename)
        

    vid = static_frame(pdf, big_image, frame_rate, length)
    vid = ken_burns(vid,
        width=width,
        height=height,
        start_top_left=(0,0),
        start_bottom_right=(vid.width(), (height/width)*vid.width()),
        end_top_left=(0,vid.height()-(height/width)*vid.width()),
        end_bottom_right=(vid.width(), vid.height())
    )
    
    return vid

class horizontal_scroll(Clip):
    def __init__(self, clip, frame_index, width):
        assert isinstance(clip, Clip) 
        assert isinstance(frame_index, int)
        assert isinstance(width, int)

        self.clip = clip
        self.frame_index = frame_index
        self.width_ = width

        self.source_frame = clip.get_frame(frame_index)

    def __repr__(self):
        return f'horizontal_scroll({self.clip}, {self.frame_index}, {self.width_})'

    def frame_rate(self):
        return self.clip.frame_rate()

    def length(self):
        return self.source_frame.shape[1] - self.width_

    def width(self):
        return self.width_

    def height(self):
        return self.source_frame.shape[0]

    def frame_signature(self, index):
        return f"%s hs:%s/%s" % (self.clip.frame_signature(self.frame_index), self.width_, index)

    def get_frame(self, index):
        x = self.source_frame[:,index:index+self.width_,:]
        return x

    def get_audio(self):
        return self.clip.get_audio()

