import cv2



def test_zip_file1():
    a = zip_file("test_files/bunny.zip", frame_rate=15)
    a.verify()

def test_zip_file2():
    with pytest.raises(FileNotFoundError):
        zip_file("test_files/bunny.zap", frame_rate=15)


def test_to_default_metrics():
    a = from_file("test_files/bunny.webm", decode_chunk_length=None)
    a = slice_clip(a, 0, 1.0)

    with pytest.raises(ValueError):
        a.metrics.verify_compatible_with(Clip.default_metrics)

    b = to_default_metrics(a)
    b.verify()
    b.metrics.verify_compatible_with(Clip.default_metrics)

    # Stereo to mono.
    Clip.default_metrics.num_channels = 1
    c = to_default_metrics(a)
    c.verify()
    c.metrics.verify_compatible_with(Clip.default_metrics)

    # Mono to stereo.
    Clip.default_metrics.num_channels = 2
    d = to_default_metrics(c)
    d.verify()
    d.metrics.verify_compatible_with(Clip.default_metrics)

    # Don't know how to deal with 3 channels.
    Clip.default_metrics.num_channels = 3
    with pytest.raises(NotImplementedError):
        to_default_metrics(a)
    Clip.default_metrics.num_channels = 2

def test_timewarp():
    a = white(640, 480, 30, 3)
    b = timewarp(a, 2)
    b.verify()
    assert 2*b.length() == a.length()

def test_pdf_page1():
    a = pdf_page("test_files/snowman.pdf", page_num=1, frame_rate=10, length=3)
    a.verify()

def test_pdf_page2():
    a = pdf_page("test_files/snowman.pdf",
                 page_num=1,
                 frame_rate=10,
                 length=3,
                 size=(101,120))
    a.verify()
    assert a.width() == 101
    assert a.height() == 120

def test_spin():
    a = static_image("test_files/flowers.png", 30, 5)
    b = spin(a, 2)
    b.verify()

def test_vstack():
    a = static_image("test_files/flowers.png", 30, 3)
    b = static_image("test_files/water.png", 30, 5)

    c = vstack(a, b, align=Align.LEFT)
    c.verify()

    d = vstack(a, b, align=Align.RIGHT)
    d.verify()

    e = vstack(a, b, align=Align.CENTER)
    e.verify()

    with pytest.raises(NotImplementedError):
        vstack(a, b, align=Align.TOP)

def test_hstack():
    a = static_image("test_files/flowers.png", 30, 3)
    b = static_image("test_files/water.png", 30, 5)

    c = hstack(a, b, align=Align.TOP)
    c.verify()

    d = hstack(a, b, align=Align.BOTTOM)
    d.verify()

    e = hstack(a, b, align=Align.CENTER)
    e.verify()

    with pytest.raises(NotImplementedError):
        hstack(a, b, align=Align.LEFT)

def test_stack_clips():
    a = static_image("test_files/flowers.png", 30, 3)
    b = static_image("test_files/water.png", 30, 5)

    # Integer for spacing in the list
    c = stack_clips(a, 10, b, align=Align.LEFT, vert=True, name='vstack')
    c.verify()

    # Junk in the list
    with pytest.raises(TypeError):
        stack_clips(a, 1.2, b, align=Align.LEFT, vert=True, name='vstack')

def test_background():
    font = "test_files/ethnocentric_rg_it.ttf"
    a = draw_text("Hello!", font, font_size=200, color=[255,0,255], frame_rate=30, length=5)
    b = background(a, (255,0,0))
    b.verify()

def test_superimpose_center():
    a = static_image("test_files/flowers.png", 30, 3)
    b = static_image("test_files/water.png", 30, 5)

    c = superimpose_center(a, b, 0)
    c.verify()

def test_loop():
    a = static_image("test_files/flowers.png", 30, 1.2)
    b = spin(a, 1)
    c = loop(b, 10)
    c.verify()
    assert c.length() == 10

def test_ken_burns1():
    # Legit.
    a = static_image("test_files/flowers.png", 30, 10)
    b = ken_burns(clip=a,
                  width=520,
                  height=520,
                  start_top_left=[0,0],
                  start_bottom_right=[100,100],
                  end_top_left=[100,100],
                  end_bottom_right=[250,250])
    b.verify()

def test_ken_burns2():
    # Small distortion: OK.  1.779291553133515 vs 1.7777777777777777
    a = static_image("test_files/flowers.png", 30, 10)
    a2 = scale_to_size(a, width=2945, height=1656)
    b = ken_burns(clip=a2,
                  width=1024,
                  height=576,
                  start_top_left=(63,33),
                  start_bottom_right=(2022,1134),
                  end_top_left=(73,43),
                  end_bottom_right=(2821,1588))
    b.verify()

def test_ken_burns3():
    # Big distortions: Bad.
    a = static_image("test_files/flowers.png", 30, 10)

    with pytest.raises(ValueError):
        ken_burns(clip=a,
                  width=520,
                  height=520,
                  start_top_left=[0,0],
                  start_bottom_right=[100,100],
                  end_top_left=[100,100],
                  end_bottom_right=[250,200])

    with pytest.raises(ValueError):
        ken_burns(clip=a,
                  width=520,
                  height=520,
                  start_top_left=[0,0],
                  start_bottom_right=[100,150],
                  end_top_left=[100,100],
                  end_bottom_right=[200,200])


    with pytest.raises(ValueError):
        ken_burns(clip=a,
                  width=520,
                  height=520,
                  start_top_left=[0,0],
                  start_bottom_right=[100,100],
                  end_top_left=[2000,2000],
                  end_bottom_right=[3000,3000]).verify()


def test_ken_burns4():
    # Grabbing at the exact width or height: OK, because the slice is not
    # inclusive.
    a = black(width=100, height=100, frame_rate=30, length=3)
    b = ken_burns(clip=a,
                  width=50,
                  height=50,
                  start_top_left=(10,10),
                  start_bottom_right=(100,100),
                  end_top_left=(10,10),
                  end_bottom_right=(100,100))
    b.verify()

def test_fade_between():
    a = black(640, 480, 30, 3)
    b = white(640, 480, 30, 3)

    # Normal use.
    c = fade_between(a, b)
    c.verify()

    # Must have same length.
    d = white(640, 480, 30, 4)
    with pytest.raises(ValueError):
        fade_between(a, d)

def test_silence_audio():
    a = from_file("test_files/bunny.webm", decode_chunk_length=5)
    a = slice_clip(a, 0, 5)
    b = silence_audio(a)
    b.verify()

